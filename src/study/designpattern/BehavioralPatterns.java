package study.designpattern;
/*클래스나 객체 사이의 상호작용과 책임 분배를 정의하여, 효율적이고 유연한 시스템을 만드는 데 도움을 주는 패턴입니다.

	•	옵저버 (Observer): 한 객체의 상태 변화가 있을 때 관련된 객체들에게 자동으로 알림을 보내는 패턴.
	•	전략 (Strategy): 알고리즘을 캡슐화하여 클라이언트가 필요에 따라 런타임에 다른 알고리즘을 선택할 수 있도록 하는 패턴.
	•	커맨드 (Command): 요청을 객체로 캡슐화하여 요청에 대한 로그나 큐잉을 관리하고, 요청의 실행을 지연시킬 수 있는 패턴.
	•	템플릿 메서드 (Template Method): 상위 클래스에서 알고리즘의 뼈대를 정의하고, 하위 클래스에서 그 알고리즘의 세부 단계를 구현하도록 하는 패턴.
	•	상태 (State): 객체의 상태에 따라 행동을 다르게 정의하는 패턴. 상태에 따른 동작을 상태 객체에 위임.
	•	책임 연쇄 (Chain of Responsibility): 요청을 처리할 수 있는 객체를 연쇄적으로 구성하여, 각 객체가 자신의 책임 범위 내에서 요청을 처리하고, 그렇지 않으면 다음 객체로 요청을 넘기는 패턴.
	•	메멘토 (Memento): 객체의 상태를 저장하고 복원할 수 있는 패턴으로, 객체의 캡슐화를 유지하면서 상태를 저장.
	•	중재자 (Mediator): 객체 간의 복잡한 상호작용을 중재자 객체가 담당하여 객체 간 결합도를 줄이는 패턴.
	•	인터프리터 (Interpreter): 언어의 문법을 정의하고 해당 언어를 처리할 수 있는 패턴.
	•	방문자 (Visitor): 객체 구조에 대한 연산을 분리하여 새로운 연산을 추가할 수 있도록 하는 패턴.*/

public class BehavioralPatterns {

    // 1.
}
