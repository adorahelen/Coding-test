package study.designpattern;
/*클래스와 객체의 구조를 정의하고 설계 요소 간의 관계를 최적화하여 효율적인 시스템을 구축하는 데 도움을 주는 패턴입니다.

	•	어댑터 (Adapter): 서로 다른 인터페이스를 가진 클래스들이 함께 작동할 수 있도록 인터페이스를 변환하는 패턴.
	•	데코레이터 (Decorator): 객체에 추가적인 책임이나 기능을 동적으로 추가하는 패턴으로, 상속을 사용하지 않고 기능을 확장.
	•	퍼사드 (Facade): 복잡한 시스템의 하위 모듈을 단순화된 인터페이스로 감싸는 패턴으로, 클라이언트가 복잡한 부분을 숨길 수 있도록 도움.
	•	프록시 (Proxy): 접근 제어, 캐싱 등을 위해 원본 객체에 대한 대리인 역할을 하는 객체를 제공하는 패턴.
	•	브리지 (Bridge): 추상화와 구현을 분리하여 독립적으로 확장할 수 있게 하는 패턴.
	•	컴포지트 (Composite): 객체를 트리 구조로 구성하여 개별 객체와 그 객체 그룹을 동일하게 다룰 수 있도록 하는 패턴.
	•	플라이웨이트 (Flyweight): 메모리를 절약하기 위해 객체를 공유하여 사용하는 패턴.*/
public class StructuralPatterns {
}
